#ifndef __Boids3DFrame__
#define __Boids3DFrame__

/**
@file
Subclass of Frame, which is generated by wxFormBuilder.
*/

#include "BoidsUI.h"

//// end generated include

#include "world.hpp"

/** Implementing Frame */
class Boids3DFrame : public Frame
{
	protected:
		// Handlers for Frame events.
		void BoidsFocusChanged( wxFocusEvent& event );
		void BoidsChanged( wxCommandEvent& event );
		void SpeedFocusChanged( wxFocusEvent& event );
		void SpeedChanged( wxCommandEvent& event );
		void WorldSizeFocusChanged( wxFocusEvent& event );
		void WorldSizeChanged( wxCommandEvent& event );
		void ViewDistanceFocusChanged( wxFocusEvent& event );
		void ViewDistanceChanged( wxCommandEvent& event );
		void ViewAngleFocusChanged( wxFocusEvent& event );
		void ViewAngleChanged( wxCommandEvent& event );
		void AlignmentFocusChanged( wxFocusEvent& event );
		void AlignmentChanged( wxCommandEvent& event );
		void CohesionFocusChanged( wxFocusEvent& event );
		void CohesionChanged( wxCommandEvent& event );
		void SeparationFocusChanged( wxFocusEvent& event );
		void SeparationChanged( wxCommandEvent& event );
		void WanderChanged( wxCommandEvent& event );
		void PredatorChanged( wxCommandEvent& event );
		void RealtimeChanged( wxCommandEvent& event );
	public:
		/** Constructor */
		Boids3DFrame( wxWindow* parent );
	//// end generated class members
		wxWindow *Get3DPanel() { return m_boidsPanel; }

		std::string GetBoids() {
			SetBoids(m_boidsText->GetValue());
			return std::string(m_boidsText->GetValue());
		}
		void SetBoids(wxString value) {
			m_boidsText->SetValue(CheckArg(value, 1, 50000, 500, "Number of Boids"));
		}

		std::string GetSpeed() {
			SetSpeed(m_speedText->GetValue());
			return std::string(m_speedText->GetValue());
		}
		void SetSpeed(wxString value) {
			m_speedText->SetValue(CheckArg(value, 1, 100, 50, "Speed of Boids"));
		}

		std::string GetWorldSize() {
			SetWorldSize(m_worldSizeText->GetValue());
			return std::string(m_worldSizeText->GetValue());
		}
		void SetWorldSize(wxString value) {
			m_worldSizeText->SetValue(CheckArg(value, 50, 1000, 100, "Size of world"));
		}

		std::string GetViewDistance() {
			SetViewDistance(m_viewDistanceText->GetValue());
			return std::string(m_viewDistanceText->GetValue());
		}
		void SetViewDistance(wxString value) {
			m_viewDistanceText->SetValue(CheckArg(value, 1, 20, 5, "View distance"));
		}

		std::string GetViewAngle() {
			SetViewAngle(m_viewAngleText->GetValue());
			return std::string(m_viewAngleText->GetValue());
		}
		void SetViewAngle(wxString value) {
			m_viewAngleText->SetValue(CheckArg(value, 1, 180, 90, "View angle"));
		}

		std::string GetAlignment() {
			SetAlignment(m_alignmentText->GetValue());
			return std::string(m_alignmentText->GetValue());
		}
		void SetAlignment(wxString value) {
			m_alignmentText->SetValue(CheckArg(value, 0, 100, 50, "Alignment factor"));
		}

		std::string GetCohesion() {
			SetCohesion(m_cohesionText->GetValue());
			return std::string(m_cohesionText->GetValue());
		}
		void SetCohesion(wxString value) {
			m_cohesionText->SetValue(CheckArg(value, 0, 100, 50, "Cohesion factor"));
		}

		std::string GetSeparation() {
			SetSeparation(m_separationText->GetValue());
			return std::string(m_separationText->GetValue());
		}
		void SetSeparation(wxString value) {
			m_separationText->SetValue(CheckArg(value, 0, 100, 50, "Separation factor"));
		}

		void SetWorld( World<float>* world) { world_ = world; }

		wxString CheckArg(const wxString value, int min, int max, int defaultvalue, std::string str) {
			int val = -1;
			try {
				val = std::stoi(std::string(value));
			}
			catch (...) {
			}

			if (val < min || val > max) {
				std::cout << str << " must be between " << min << " and " << max << std::endl;
				val = defaultvalue;
			}

			return wxString(std::to_string(val));
		}

	private:
		World<float>* world_;

};

#endif // __Boids3DFrame__
